

class bigNumber
{
	public:
		bigNumber(vector<int> n);
		~bigNumber;

		int getDigit(int n) {return digits[n];}

		int digitCount();
		
		void printNumber();

	private:
		int digits[100];
		int digitCount;


};

bigNumber::bigNumber(vector<int> n)
{
	int count=0;

	for (vector<int>::iterator i=n.begin(); i!=n.end(); i++)
	{
		digits[count] = *i;
		count++;
	}

	digitCount = n.size();
}

int bigNumber::digitCount()
{
	for (int i=99; i>=0; i--)
	{
		if (int getDigit(i)>0)
		{
			return i+1;
		}
	}

	return 0;
}

void bigNumber::printNumber()
{
	int comma = digitCount % 3;

	for (int i=0; i<digitCount; i++)
	{
		if (i>0 && comma==0)
		{
			cout << ",";
			comma = 3;
		}

		cout << digits[digitCount-i];

		comma--;
	}
}

bigNumber addNumbers(bigNumber bn1, bigNumber bn2)
{
	vector<int> temp;
	int carry=0;

	for (int i=0; i<100; i++)
	{
		int tempNumber = bn1.getDigit(i) + bn1.getDigit(i);
		
		int tempNumber += carry;

		if (tempNumber>9)
		{
			tempNumber-=10;
			carry = 1;
		}

		else 
		{
			carry = 0;
		}

		temp.pushback(tempNumber);
	}

	return bigNumber(temp);
}













